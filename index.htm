<!DOCTYPE html>

<html>
  <head>
    <title>Simple</title>
    <script src='simple.js'></script>
    <script src='types.js'></script>
    <script src='vm.js'></script>
    <script src='compiler.js'></script>
    <script src='parser.js'></script>
    <script src='lexer.js'></script>
    
    <script>
      function init() {
        
        var ast = [
        
          ['def', 'fib', ['n'],
            [ 
              ['if',
                ['<=', ['ident', 'n'], 0],
                [ ['return', 0]
                ],
                ['<=', ['ident', 'n'], 1],
                [ ['return', 1]
                ],
                null,
                [ [ 'return',
                    [ '+',
                      ['call', ['ident', 'fib'], [['-', ['ident', 'n'], 2]]],
                      ['call', ['ident', 'fib'], [['-', ['ident', 'n'], 1]]]
                    ]
                  ]
                ]
              ]
            ]
          ],
        
          ['def', 'add', ['l', 'r'],
            [ 
              ['call', ['ident', 'print'], ["i'm in a function!"]],
              ['return', ['+', ['ident', 'l'], ['ident', 'r']]]
            ]
          ],
          
          ['assign', ['ident', 'z'], ['call', ['ident', 'fib'], [20]]],
          ['call', ['ident', 'print'], [['ident', 'z']]],
          
          ['assign', ['ident', 'a'], 10],
          
          ['if',
            ['<', ['ident', 'a'], 30],
            [ ['call', ['ident', 'print'], ["a is less than 30! - 1"]],
              ['call', ['ident', 'print'], ["a is less than 30! - 2"]],
              ['call', ['ident', 'print'], ["a is less than 30! - 3"]]
            ],
            ['<', ['ident', 'a'], 40],
            [ ['call', ['ident', 'print'], ["a is less than 40! - 1"]],
              ['call', ['ident', 'print'], ["a is less than 40! - 2"]],
              ['call', ['ident', 'print'], ["a is less than 40! - 3"]]
            ],
            null,
            [ ['call', ['ident', 'print'], ["a is >= 40"]]
            ]
          ],
          
          ['trace'],
        
          ['assign', ['ident', 'b'], ['*', 20, 30]],
          ['assign', ['ident', 'c'], ['+', ['ident', 'b'], 100]],
          
          ['assign', ['ident', 'x'], 0],
          ['while',
            ['<', ['ident', 'x'], 10],
            [ ['call', ['ident', 'print'], [['ident', 'x']]],
              ['assign', ['ident', 'x'], ['+', ['ident', 'x'], 1]],
              ['call', ['ident', 'delay'], [['call', ['ident', 'random'], []]]]
              // ['call', ['ident', 'delay'], [100]]
            ]
          ],
          
          ['assign', ['ident', 'a'], 200],
          ['trace'],
          
          // ['call',
          //   ['ident', 'print'],
          //   [ ['call', ['ident', 'add'], [5, 6]]
          //   ]
          // ],
          
          ['trace'],
          ['call', ['ident', 'print'], [['+', 50, ['ident', 'c']], 20, "foobar!"]],
          ['call', ['ident', 'print'], [['ident', 'b'], ['ident', 'c'], ['ident', 'x']]]
        ];
        
        var code = document.getElementById('source').innerText;
        
        var lexer = simple.createLexer(code);
        var parser = simple.createParser(lexer);
        
        console.log(parser.parseTopLevel());
        
        // do {
        //   var token = lexer.nextToken();
        //   var text = lexer.text();
        //   console.log(simple.TOKEN_NAMES[token], text, lexer.error());
        // } while (token !== simple.TOKENS.EOF);
        
        // var vm = simple.createVM();
        //         
        //         var compiler = new simple.Compiler(vm.env);
        //         var code = compiler.compile(ast);
        //         
        //         vm.trace = function(vm, task, frame) {
        //           console.log("tracin'", task, frame);
        //           console.log(frame.dirtyLocals());
        //         }
        //         
        //         vm.env['random'] = function() {
        //           return Math.floor(Math.random() * 1000);
        //         }
        //         
        //         vm.env['delay'] = function(args, task, env, vm) {
        //           
        //           if (task.state == simple.TASK_RESUMED) {
        //             task.state = simple.TASK_RUNNABLE;
        //             return null;
        //           }
        //           
        //           task.state = simple.TASK_BLOCKED;
        //           setTimeout(function() { vm.resumeTask(task); }, args[0]);
        //           
        //         };
        //         
        //         vm.env['print'] = function(args) {
        //           console.log("VM say: ", args[0], args[1], args[2]);
        //         };
        //         
        //         vm.start();
        //         vm.spawn(code);
        //         
        //         // for (var i = 0; i < 20; ++i) {
        //         //   vm.spawn(code);
        //         // }
        //         // 
        //         // setTimeout(function() {
        //         //   for (var i = 0; i < 20; ++i) {
        //         //     vm.spawn(code);
        //         //   }
        //         // }, 10000);
        //         
        //         // var start = Date.now();
        //         // for (var i = 0; i < 100000; ++i) {
        //         //   
        //         // }
        //         // 
        //         // console.log(Date.now() - start);
        //         
        
        
      }
    </script>
  </head>
  <body onload='init()'>
    <script type='text/simple' id='source'>
      def fib(n)
      {
        if n <= 0 {
          return 0
        } else if n <= 1 {
          return 1
        } else {
          return fib(n-2) + fib(n-1)
        }
      }

      while a < 100 { a = a + 1 }

      def add(l, r) {
        print "i'm in a function"
        return l + r
      }

      z = add 10, (add 20, 30), 40
      print z

      a = 10

      if a < 30 {
        print "a is less than 30! - 1";
        print "a is less than 30! - 2"
        print "a is less than 30! - 3"
      }
      else if a < 40
      {
        print "a is less than 40! - 1"
        print "a is less than 40! - 2"
        print "a is less than 40! - 3"
      }
      else
      {
        print "a is >= 40"
      }

      trace; b = 20 * 30; c = b + 100
      
      x = 10
      while x < 10
      {
        print x
        x = x + 1
        delay random()
      }

      a = 200
      trace
      trace

      print(0x42 + c, 20, "foobar!")
      print b, c, x
    </script>
  </body>
</html>